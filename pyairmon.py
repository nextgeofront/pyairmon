import sys
import time

import serial
from serial.tools import list_ports
from threading import Thread, Event
import zmq

class AirconIrController():

    def __init__(self):

        self.stopped = Event()

        self.context = zmq.Context()
        self.receiver = self.context.socket(zmq.SUB)
        self.receiver.bind("tcp://127.0.0.1:50010")
        self.receiver.subscribe("")

        self.reader = None

    def start(self):
        com_ports = []
        os_type = sys.platform
        if os_type == 'darwin':
            com_ports = [ p for p in list_ports.comports() if 'usbserial' in p.device ]
            com_ports.sort(key=lambda x: x.device, reverse=False)
        else:
            com_ports = [ p for p in list_ports.comports() if 'USB-SERIAL' in p.description ]
            com_ports.sort(key=lambda x: x.device, reverse=False)

        if com_ports:
            self.s = serial.Serial(
                port=com_ports[0].device,
                baudrate=115200,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE,
                bytesize=serial.EIGHTBITS,
                timeout=0.5
            )
            self.reader = SerialDeviceReader(self.s)
            self.reader.start()

            time.sleep(3)


    def stop(self):
        try:
            self.reader.shutdown()
        except:
            pass

    def send_ir_command(self, cmd='ON'):
        self.s.write([0x49,0x73,0x65,0x6e,0x64,0x49,0x52,0x5f,0x5f,0x4e])
        self.s.read(4)

        if cmd == 'ON':
            cmd_data = [
                0x32,0x36,0x20,0x30,0x32,0x34,0x34,0x20,0x34,0x35,0x39,0x38,0x20,0x30,0x42,0x41
                ,0x41,0x20,0x32,0x32,0x46,0x41,0x20,0x30,0x31,0x46,0x34,0x20,0x30,0x31,0x46,0x32
                ,0x20,0x30,0x31,0x46,0x32,0x20,0x30,0x35,0x44,0x32,0x20,0x30,0x31,0x46,0x41,0x20
                ,0x30,0x42,0x41,0x45,0x20,0x30,0x31,0x20,0x32,0x33,0x20,0x46,0x32,0x20,0x37,0x33
                ,0x20,0x32,0x32,0x20,0x33,0x32,0x20,0x32,0x46,0x20,0x33,0x35,0x20,0x46,0x32,0x20
                ,0x45,0x46,0x20,0x32,0x45,0x20,0x46,0x32,0x20,0x34,0x46,0x20,0x33,0x34,0x20,0x34
                ,0x31,0x20,0x33,0x46,0x20,0x32,0x38,0x20,0x33,0x32,0x20,0x32,0x33,0x20,0x32,0x46
                ,0x20,0x33,0x36,0x20,0x46,0x32,0x20,0x45,0x46,0x20,0x32,0x45,0x20,0x46,0x32,0x20
                ,0x38,0x34,0x20,0x31,0x33,0x20,0x46,0x32,0x20,0x38,0x33,0x20,0x46,0x32,0x20,0x34
                ,0x33,0x20,0x33,0x32,0x20,0x46,0x33,0x20,0x35,0x32,0x20,0x33,0x33,0x20,0x32,0x32
                ,0x20,0x32,0x33,0x20,0x33,0x33,0x20,0x46,0x32,0x20,0x38,0x46,0x20,0x33,0x35,0x20
                ,0x32,0x32,0x20,0x33,0x46,0x20,0x32,0x35,0x20,0x46,0x33,0x20,0x34,0x32,0x20,0x46
                ,0x46,0x20]
            self.s.write(cmd_data)
        elif cmd == 'OFF':
            cmd_data = [
                0x32,0x36,0x20,0x30,0x32,0x34,0x34,0x20,0x34,0x35,0x42,0x38,0x20,0x30,0x42,0x41
                ,0x41,0x20,0x32,0x32,0x46,0x41,0x20,0x30,0x31,0x46,0x38,0x20,0x30,0x31,0x46,0x36
                ,0x20,0x30,0x31,0x46,0x32,0x20,0x30,0x35,0x44,0x36,0x20,0x30,0x31,0x45,0x45,0x20
                ,0x30,0x42,0x42,0x41,0x20,0x30,0x31,0x20,0x32,0x33,0x20,0x46,0x32,0x20,0x37,0x33
                ,0x20,0x32,0x32,0x20,0x33,0x33,0x20,0x32,0x46,0x20,0x33,0x35,0x20,0x46,0x32,0x20
                ,0x45,0x46,0x20,0x32,0x45,0x20,0x46,0x32,0x20,0x36,0x33,0x20,0x33,0x34,0x20,0x31
                ,0x33,0x20,0x46,0x32,0x20,0x38,0x33,0x20,0x32,0x32,0x20,0x33,0x32,0x20,0x46,0x33
                ,0x20,0x36,0x46,0x20,0x32,0x45,0x20,0x46,0x32,0x20,0x45,0x46,0x20,0x32,0x38,0x20
                ,0x34,0x31,0x20,0x33,0x46,0x20,0x32,0x38,0x20,0x33,0x32,0x20,0x32,0x32,0x20,0x33
                ,0x33,0x20,0x33,0x32,0x20,0x46,0x33,0x20,0x35,0x32,0x20,0x33,0x33,0x20,0x32,0x32
                ,0x20,0x32,0x33,0x20,0x33,0x33,0x20,0x46,0x32,0x20,0x38,0x46,0x20,0x33,0x35,0x20
                ,0x32,0x32,0x20,0x33,0x46,0x20,0x32,0x37,0x20,0x33,0x33,0x20,0x32,0x46,0x20,0x46
                ,0x46,0x20]

            self.s.write(cmd_data)

        print(f'send_ir_command {cmd} end.')


class SerialDeviceReader(Thread):

    def __init__(self, s):
        Thread.__init__(self)
        self.stopped = Event()
        self.s = s

        print('SerialDeviceReader init.')
        self.context = zmq.Context()
        self.sender = self.context.socket(zmq.PUSH)
        self.sender.connect('tcp://127.0.0.1:50011')

    def run(self):
        buf = bytearray()
        while not self.stopped.is_set() and self.s.isOpen():
            try:
                if self.s.in_waiting > 0:
                    read_buf = self.s.read(self.s.in_waiting)
                    buf.extend(read_buf)
                    print(buf)
                else:
                    buf.clear()
                    time.sleep(0.001)
            except Exception as ex:
                print(ex)
                continue

        self.s.close()
        self.sender.close()

    def shutdown(self):
        self.stopped.set()
        print('SerialDeviceReader shutdown.')



if __name__ == '__main__':
    airmon = AirconIrController()
    airmon.start()
    # airmon.send_ir_command('OFF')
    # time.sleep(5)
    airmon.send_ir_command('ON')
    airmon.stop()